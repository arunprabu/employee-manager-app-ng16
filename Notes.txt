Angular 16 

Webapps 
-------
  1. Server Side Rendering Apps (SSR)
      * Pages will reload / refresh 

      Arch: 
        1 App: HTML, CSS, JS, Back End Code, DB query 

      In 1 Server the whole app will be deployed 

      Disadvantages 
      -------
        1. Slower Webapps
        2. High Bandwidth Consumption 
        3. Expensive 
        4. Not offering better UX 
        5. Server is doing the heavy lifting 

  2. Client Side Rendering Apps (CSR) = SPA + RESTful API 
      * Pages will not reload / refresh 

      Arch: 
        Front End App: HTML, CSS, JS 
          Single Page Apps 

        Back End App: Back end + DB Query 
          RESTful API 

      2 Servers are needed to host both the apps 

      Advantages
      --------
        1. Faster Webapps
        2. Less Bandwidth Consumption 
        3. Not Expensive 
        4. offering better UX 
        5. Server's workload is shared between two servers
      

Single Page Apps (SPA)
-------
  7 Characteristics 
  ---------------
    1. Pages should not reload
    2. URL should change 
    3. History should be maintained without page refresh 
    4. Header and Footer should be intact -- w/o loading again and again 
    5. Main section should show contextual updates. 
    6. Active Menu should be set 
    7. Page title should also be changed 

How to develop SPA? using SPA Libraries or Frameworks 
-------
  #1 React JS (library)
  #2 Angular (Framework)
  #3 VueJS (Framework)
  #4 Svelte (Framework)

==========================

Setting up environment 
------
  1. NodeJS v16+
  2. VS Code 
  3. Browser 
  4. Angular CLI


CLI Versions 
--------
  Angular 2 --- CLI v 1.2.x 
  Angular 4 --- CLI v 1.5.x 
  Angular 5 --- CLI v 1.7.x 
  Angular 6 --- CLI v 6 (semver)
  Angular 7 --- CLI v 7
  Angular 8 --- CLI v 8
  Angular 9 --- CLI v 9
  Angular 10 --- CLI v 10
  Angular 11 --- CLI v 11
  Angular 12 --- CLI v 12
  Angular 13 --- CLI v 13
  Angular 14 --- CLI v 14
  Angular 15 --- CLI v 15
  Angular 16 --- CLI v 16


  npm i @angular/cli -g 


Building blocks 
-----------
  Components 
    HTML [DONE]
    CSS [DONE]
    TS [DONE]
  Directives [DONE]
  Services [DONE]
  Pipes [FRIDAY]
  Guards [FRIDAY]
  Interfaces [DONE]
  Classes  [DONE]
  Modules [DONE]
  Interceptors [FRIDAY]

Concepts
------
  Routing [DONE]
  Data Binding [DONE]
  Cross Component Communication [DONE]
  Dependency Injection [DONE]
  REST API Calls [DONE]
  RxJS/Observables [DONE]
  Subscription  [DONE]
  Authentication [FRIDAY]
  Lazy Loading  [FRIDAY]
  Build and Deployment [FRIDAY]
  
Unit Testing [MONDAY-WEDNESDAY]
Angular library [NEXT THURSDAY]
Angular Material (20 mins) [NEXT THURSDAY]
NgRx (1.5- 2 hours) [NEXT FRIDAY]
Angular Animations (30 mins) [NEXT FRIDAY]


Think in Angular 
------
  Step 0: Identify the number of Components

  Step 1: Break the UI into Component hierarchy 

  
ng g c shared/components/header 
ng g c shared/components/footer -t -s


Content Projection / Transclusion 
---------------------------------
  Learn about conditional content projection or transclusion 
  

Single Page Apps (SPA)
-------
  7 Characteristics 
  ---------------
    1. Pages should not reload [DONE]
    2. URL should change [DONE]
    3. History should be maintained without page refresh [DONE]
    4. Header and Footer should be intact -- w/o loading again and again [DONE]
    5. Main section should show contextual updates. [DONE]
    6. Active Menu should be set [TODO]
    7. Page title should also be changed [TODO]


Routing in Angular
===================
  Step 0: Identify the menus and the urls 
          Home              - http://localhost:4200/
          Concepts          - http://localhost:4200/concepts
          About Us          - http://localhost:4200/about-us
          Contact Us        - http://localhost:4200/contact-us

  Step 1: Let's setup the identified urls in menu-list.comp's template in hrefs 

  Step 2: Check the app. URLs will not be stable. 
          Let's work on to create the necessary components
          ng g c home/components/home -t -s 
          ng g c concepts/components/concepts -s 
          ng g c about-us/components/about-us -s -t
          ng g c contact-us/components/contact-us -s -t

  Step 3: Let's config the routing in app-routing.module.ts 
  
  Step 4: Check the app. URLs will be stable. 
          Let's load the component in between header and footer.
          in app.comp.html 
          in between header and footer, add <router-outlet></router-outlet>

  Step 5: Check the app. Page will still refresh. Let's fix it. 
          in menu.comp template, replace href with routerLink. 


  Routing is over!.. 

=============================


Naming Conventions & Casing Conventions
-------
Casing Types 
--------
  1. PascalCase 
      * Recommended for Object Oriented Program's classes 
      * also Recommended for Interface in Java & TypeScript 
      * also needed for Enum

      examples 
      ---
        class CarDetails {

        }

        interface Employee {

        }

  2. camelCase 
      * Recommended for variables, const, functions, methods in JS & TS 
      * Recommended for id's of html 

      examples 
      -----
        var myCar = 'BMW';

        function getCarInfo() {
          //....
        }
  
  3. kebab-case
      * Recommended for URLs 
      * Recommended for file names, folder names (if not react), assets in front end projects 
      * Recommended for css classes 
      * Recommended for custom attributes
      * okay for id's of html elements if your architect says okay

      examples 
      -----
        btn-primary
        slideshow-container
        youtube-logo.png 

  4. snake_case
      * never ever use this. 
      * okay for const in JS & TS if architect accepts

      examples
      ---
        const MAX_STUDENTS_PER_CLASS = 30;
        
-----------------

Formatting [DONE]
Linting Rules [DONE]
-------------

Data Binding 
----
  * keeping the data in comp.ts and displaying it in comp.html 

  1. Interpolation [DONE]
      TS ==> HTML 
      {{}}

  2. Property Binding  [DONE]
      TS ==> HTML 
      []

  3. Event Binding  [DONE]
      TS <== HTML 
      ()

  4. Two Way Binding  [DONE]
      TS <=> HTML
      [(ngModel)]

      Note: implement this in form element such as input, textarea

  5. Custom Property Binding [DONE]
  6. Custom Event Binding [DONE]


Cross Component Communication
-----------------
  1. Parent to Child Component Communication [DONE]
      using Custom Property Binding

  2. Child to Parent Component Communication
      2.1 using Custom Event Binding [DONE]
            sending data from child to parent comp 

      2.2 using @ViewChild() or @ViewChildren()  [TODO]
            accessing child comp's data from parent comp

  3. Any to Any Component Communication
      3.1 Using Services, RxJS/Observables, Subscription 
      3.2 Using NgRx (third party Framework)

========


Directives
------
  * Special Instructions to the DOM

  1. Attribute Directives
      examples: routerLink, routerLinkActive, routerLinkActiveOptions

  2. Structural Directives
      => impacts will be on html (structural layer)
        *ngIf (used for conditional rendering )

        *ngFor (used for looping thru)

        ngSwitch [TODO]

  3. Custom Attribute Directives 
      
  4. Custom Structural Directives [TODO]


      
Project Structure 
==================
  1. Feature-wise and Building Block wise structure [RECOMMENDED]
    src/
      app/ 
        shared/
          components/
            header/
            footer/
            menu-list/
        home/
          components/
        concepts/
          components/
          directives/
            colorizer.directive.ts 
        about-us/
          components/
        contact-us/
          components/
        employees/
          components/
            list-employees/
            add-employee/
            employee-details/
        ....
        ....
        ....
        ....
        ....


  2. Feature-wise structure 
      src/
        app/
          home/
            home.comp.ts 
            home.comp.html 
            home.comp.css
            home.comp.spec.ts 
            colorizer.directive.ts 

  3. Building Block wise structure 
      src/
        app/ 
          components/
            ...
            ...
          directives/
            ...
            ...


=====

Employee Manager 
  Add Employee [DONE]
    localhost:4200/employees/add 

  List Employees [DONE]
    localhost:4200/employees/

  Employee Details [DONE]
    localhost:4200/employees/1
    localhost:4200/employees/2
    localhost:4200/employees/10 

  Update Employee 
    localhost:4200/employees/1
    localhost:4200/employees/2
    localhost:4200/employees/10 

  Delete Employee [TODO]
    localhost:4200/employees/1
    localhost:4200/employees/2
    localhost:4200/employees/10 
  
------------------------------------------
Forms in Angular 
------
  1. Template Driven Forms 
      * created with html 
      * easiest 

      Disadvantages 
      ----
        1. Not suitable for complex form validations 
        2. Not suitable for unit testing

  2. Reactive Forms [RECOMMENDED]
      * created with html and ts 
      * easy

      Advantages 
      ------
        1. suitable for complex form validations 
        2. suitable for unit testing

Modules
------
  Feature Module 
    ng g m employees/employees --flat -m=app

  Feature Routing Module 
    ng g m employees/employees-routing --flat -m=employees

----
Interfaces (15 mins)

Products Feature for any to any comp commns 
  Subscription


Authentication (2.5 hours)
----
  Guards
  HttpInterceptor



Guards
----
  * like securirty guards 
  * to pretect routes
  * one of building blocks of angular
  * return true or false 

  ng g g shared/guards/auth 



Authentication Flow 
----
  Signup 
  Login 
    email, password 
      if both are valid then backend will generate JWT (token) and send it to the browser 
        * browser should store JWT in either cookie or local storage or session storage
        * then, upon every subsequent request to the backend -- the JWT should be sent to the Back End 
        * backend will verify JWT -- if looks valid, then only Backend will send the successful res 
        * otherwise, backend will send negative res asking the user to login again 

      if credentials invalid, then backend will throw error to the browser 


